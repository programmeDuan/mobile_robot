一、概述
后端通过图优化实现消除累计误差的功能，目前有三个流行的库：g2o、gtsam、ceres，此处我们选用g2o，
它的一些介绍网上都有，如果不太了解，就先自行搜索一下吧。按照我们之前的设计思路，程序设计应该具
有扩展性，即如果以后想换成其他库，应该做到不需要改动过多代码就可实现。执行这一思路的做法就是使
用多态，即先用一个抽象类定义优化算法的接口，然后g2o作为它的子类实现这个接口。详细原理和做法在
以前文章里介绍过了，此处不再重复。

g2o的原版库里，只提供了se3的顶点和边，我们这里要用gnss位置做观测，所以需要自己定义一个与观测相对应的边。

为了保持模块的独立性，我们把优化算法的具体实现单独封装成一个模块，放在models文件夹中，back_end再调用这个模块。

二、工程配置与文件结构
1. 工程配置
我们的g2o使用的是早期版本，现在新的版本改动已经比较大了，如果编译过程中g2o报错，可以用本工程提供的g2o安装文件再安装一次。
安装文件放在了setup_file文件夹下。

为了引用g2o，我们在工程目录cmake文件夹下添加了g2o.cmake，然后CMakeLists.txt文件再调用这个cmake，以实现依赖。

2. 文件结构
除了上面说的工程配置以外，我们把优化算法放在models/graph_optimizer文件夹下，接口类（即基类）直接在文件夹一级目录里，
g2o相关的封装放在models/graph_optimizer/g2o文件夹下。自定义的边放在models/graph_optimizer/g2o/edge文件夹下。
这样层级分布应该还算明确。

对优化算法的调用仍然在之前介绍的back_end模块的back_end.cpp文件里。
